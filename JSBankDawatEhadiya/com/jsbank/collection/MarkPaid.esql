BROKER SCHEMA com.jsbank.collection

PATH com.jsbl.common, com.systemsltd.logging.esqls, com.systemsltd.common.esqls;
DECLARE ns NAMESPACE 'http://tempuri.org/';

CREATE FILTER MODULE ValidateMarkPaidRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL logInfoDecoratedMessage('MarkPaid Request Received', Root);
		
		SET Environment.Variables.Transaction.Request = Root.JSON.Data;
		SET Environment.Variables.protocol = Root.Properties.ReplyProtocol;
		SET Environment.Variables.host = Root.HTTPInputHeader.{'X-Remote-Host'};
		
		DECLARE inputRef REFERENCE TO Root.JSON.Data;
		CREATE FIELD Environment.Variables.Transaction;
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;

		CREATE FIELD transRef.Error IDENTITY (JSON.Array);
		
		IF NOT fieldAndValueExists(inputRef.processingCode, 'processingCode') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('processingCode');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.merchantType, 'merchantType') OR LENGTH(inputRef.merchantType) <> 4 THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('merchantType');
		END IF;
		
		IF EXISTS(Environment.Variables.Transaction.Error.Item[]) THEN
			RETURN TRUE;
		END IF;
		
		IF NOT(authorizeRequest(Root.HTTPInputHeader.Access_token, inputRef.processingCode, inputRef.merchantType, 
			Root.HTTPInputHeader.{'X-Remote-Host'})) THEN
			SET Environment.Variables.authorization = 'Failed';
			
			RETURN TRUE;
		END IF;
		
		CALL logInfoMessage('Request Authenticated');
		
		IF NOT fieldAndValueExists(inputRef.dateTime, 'dateTime') OR LENGTH(inputRef.dateTime) <> 14 THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('dateTime');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.traceNo, 'traceNo') OR LENGTH(inputRef.traceNo) <> 6
			OR validateInteger(inputRef.traceNo) = FALSE THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('traceNo');
		END IF;
			
		IF NOT fieldAndValueExists(inputRef.Billid, 'Billid') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Billid');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.Amount, 'Amount') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Amount');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.BankTranid, 'BankTranid') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('BankTranid');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.ReceiveDate, 'ReceiveDate') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('ReceiveDate');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.ReceivedType, 'ReceivedType') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('ReceivedType');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.Purpose, 'Purpose') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Purpose');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.Amountinwords, 'Amountinwords') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Amountinwords');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.Narration, 'Narration') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Narration');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.Remarks, 'Remarks') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Remarks');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.BankStatus, 'BankStatus') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('BankStatus');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.DepositorNIC, 'DepositorNIC') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('DepositorNIC');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.DepositorNTN, 'DepositorNTN') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('DepositorNTN');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.DepositorMobileNo, 'DepositorMobileNo') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('DepositorMobileNo');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.DepositorEmail, 'DepositorEmail') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('DepositorEmail');
		END IF;		

		IF NOT fieldAndValueExists(inputRef.DepositBank, 'DepositBank') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('DepositBank');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.DepositBranch, 'DepositBranch') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('DepositBranch');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.Depositdatetime, 'Depositdatetime') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Depositdatetime');
		END IF;
		
		IF NOT fieldAndValueExists(inputRef.TellerName, 'TellerName') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('TellerName');
		END IF;
		
		IF fieldAndValueExists(inputRef.ChequeNo, 'ChequeNo') THEN
			
			IF NOT fieldAndValueExists(inputRef.ChqName, 'ChqName') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('ChqName');
			END IF;
			
			IF NOT fieldAndValueExists(inputRef.ChequeDate, 'ChequeDate') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('ChequeDate');
			END IF;
			
			IF NOT fieldAndValueExists(inputRef.Chqbank, 'Chqbank') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Chqbank');
			END IF;
			
			IF NOT fieldAndValueExists(inputRef.Chqbankbranch, 'Chqbankbranch') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('Chqbankbranch');
			END IF;
			
			IF NOT fieldAndValueExists(inputRef.ChqAmount, 'ChqAmount') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('ChqAmount');
			END IF;
			
		END IF;	
		
		RETURN EXISTS(Environment.Variables.Transaction.Error.Item[]);
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE PrepareMarkPaidFailureResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;
		
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outputRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;
		
		SET outputRef.processingCode = inputRef.processingCode;
		SET outputRef.merchantType = inputRef.merchantType;
		SET outputRef.traceNo = inputRef.traceNo;
		SET outputRef.dateTime = inputRef.dateTime;
		
		IF Environment.Variables.authorization = 'Failed' THEN
			SET outputRef.responseCode = '96';
			CREATE FIELD outputRef.responseDetails IDENTITY (JSON.Array);
			SET outputRef.responseDetails.Item = 'Authentication Failed';
		ELSE
			SET outputRef.responseCode = '98';
			CREATE FIELD outputRef.responseDetails IDENTITY (JSON.Array);
			SET outputRef.responseDetails = Environment.Variables.Transaction.Error;
		END IF;	
		
		CALL logInfoDecoratedMessage('MarkPaid Response Prepared', OutputRoot);
		
		RETURN TRUE;

	END;
END MODULE;

	
CREATE COMPUTE MODULE PrepareMarkPaidRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.HTTPRequestHeader.SOAPAction = '';
		SET OutputRoot.Properties = InputProperties;
		
		CREATE FIELD OutputRoot.XMLNSC.ns:MarkPaid;
		DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC.ns:MarkPaid;
		DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;
		
		SET outputRef.ns:Datamarkpaid = '[{"billid":"'||inputRef.Billid||'","Amount":"'||inputRef.Amount||'","BankTranid":"'||inputRef.BankTranid||'","ReceiveDate":"'||inputRef.ReceiveDate||'","ReceivedType":"'||inputRef.ReceivedType||'","Purpose":"'||inputRef.Purpose||'","Amountinwords":"'||inputRef.Amountinwords||'","Ref":"'||inputRef.Ref||'","Ref1":"'||inputRef.Ref1||'","Ref2":"'||inputRef.Ref2||'","Ref3":"'||inputRef.Ref3||'","Narration":"'||inputRef.Narration||'","Remarks":"'||inputRef.Remarks||'","BankStatus":"'||inputRef.BankStatus||'","DepositorNIC":"'||inputRef.DepositorNIC||'","DepositorNTN":"'||inputRef.DepositorNTN||'","DepositorMobileNo":"'||inputRef.DepositorMobileNo||'","DepositorEmail":"'||inputRef.DepositorEmail||'","DepositBank":"'||inputRef.DepositBank||'","DepositBranch":"'||inputRef.DepositBranch||'","Depositdatetime":"'||inputRef.Depositdatetime||'","TellerName":"'||inputRef.TellerName||'"}]';
		SET outputRef.ns:Datachqdetails =  '[{"billid":"'||inputRef.Billid||'","ChequeNo":"'||inputRef.ChequeNo||'","chqname":"'||inputRef.Chqname||'","ChequeDate":"'||inputRef.ChequeDate||'","Chqbank":"'||inputRef.Chqbank||'","Chqbankbranch":"'||inputRef.Chqbankbranch||'","ChqAmount":"'||inputRef.ChqAmount||'"}]';
		
		CALL logInfoDecoratedMessage('MarkPaid Request Prepared', OutputRoot);
		
		RETURN TRUE;
	END;
END MODULE;	



CREATE COMPUTE MODULE PrepareMarkPaidResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;
		CALL logInfoDecoratedMessage('MarkPaid Response Received', InputRoot);
		
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outputRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE envRef REFERENCE TO Environment.Variables.Transaction.Request;
		DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.ns:MarkPaidResponse;
		SET OutputRoot.Properties.ContentType = 'application/json';
		
		SET outputRef.processingCode = envRef.processingCode;
		SET outputRef.merchantType = envRef.merchantType;
		SET outputRef.traceNo = envRef.traceNo;
		SET outputRef.dateTime = envRef.dateTime;
		
		IF inputRef.ns:MarkPaidResult.ns:ResponseCode = '001' THEN
			SET outputRef.ResponseCode = '200';
		ELSE
			SET outputRef.ResponseCode = '98';
		END IF;
		
		SET outputRef.Billid = inputRef.ns:MarkPaidResult.ns:Billid;
		SET outputRef.Billfetch = inputRef.ns:MarkPaidResult.ns:Billfetch;
		SET outputRef.BankTranid = inputRef.ns:MarkPaidResult.ns:BankTranid;
		SET outputRef.Error = inputRef.ns:MarkPaidResult.ns:Error;
		SET outputRef.ErrorMsg = envRef.Response;
		
		CALL logInfoDecoratedMessage('MarkPaid Response Prepared', OutputRoot);
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HandleMarkPaidFailure
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		SET OutputRoot.Properties = InputProperties;
		DECLARE envRef REFERENCE TO Environment.Variables.Transaction.Request;
		
		SET envRef.Response = 'Invalid Request Format OR Error from Server';
		
		
		RETURN TRUE;
	END;
END MODULE;